/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "CreateAsa()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "OptIn(axfer)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "CheckOptedIn()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "GatewayFull(pay,address,uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "GetMBR(string,string,string,string,bool,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ChangeContractFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "WithdrawContractFee()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "contractFee": {
          "type": "uint64",
          "key": "contractFee"
        },
        "royaltyPointToken": {
          "type": "uint64",
          "key": "royaltyPointToken"
        },
        "contractTokenBalance": {
          "type": "uint64",
          "key": "contractTokenBalance"
        },
        "contractFeeBalance": {
          "type": "uint64",
          "key": "contractFeeBalance"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Moth",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "siteFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "CreateAsa",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "OptIn",
        "args": [
          {
            "name": "optInTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "CheckOptedIn",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "GatewayFull",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "toAddress",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)"
        }
      },
      {
        "name": "GatewaySpendToken",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "toAddress",
            "type": "address"
          },
          {
            "name": "totalAmount",
            "type": "uint64"
          },
          {
            "name": "tokenToSpend",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)"
        }
      },
      {
        "name": "GetMBR",
        "args": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "logo",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "loyaltyEnabled",
            "type": "bool"
          },
          {
            "name": "loyaltyPercentage",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "EditProfile",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay"
          },
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "logo",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "loyaltyEnabled",
            "type": "bool"
          },
          {
            "name": "loyaltyPercentage",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(string,string,string,string,bool,uint64)"
        }
      },
      {
        "name": "ChangeContractFee",
        "args": [
          {
            "name": "newFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "WithdrawContractFee",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Moth smart contract.
 */
export type Moth = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: {
        siteFee: bigint | number
      }
      argsTuple: [siteFee: bigint | number]
      returns: void
    }>
    & Record<'CreateAsa()uint64' | 'CreateAsa', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'OptIn(axfer)bool' | 'OptIn', {
      argsObj: {
        optInTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [optInTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: boolean
    }>
    & Record<'CheckOptedIn()bool' | 'CheckOptedIn', {
      argsObj: {
      }
      argsTuple: []
      returns: boolean
    }>
    & Record<'GatewayFull(pay,address,uint64)(uint64,uint64)' | 'GatewayFull', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        toAddress: string
        amount: bigint | number
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, toAddress: string, amount: bigint | number]
      returns: [bigint, bigint]
    }>
    & Record<'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)' | 'GatewaySpendToken', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        toAddress: string
        totalAmount: bigint | number
        tokenToSpend: bigint | number
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, toAddress: string, totalAmount: bigint | number, tokenToSpend: bigint | number]
      returns: [bigint, bigint]
    }>
    & Record<'GetMBR(string,string,string,string,bool,uint64)uint64' | 'GetMBR', {
      argsObj: {
        title: string
        logo: string
        description: string
        url: string
        loyaltyEnabled: boolean
        loyaltyPercentage: bigint | number
      }
      argsTuple: [title: string, logo: string, description: string, url: string, loyaltyEnabled: boolean, loyaltyPercentage: bigint | number]
      returns: bigint
    }>
    & Record<'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)' | 'EditProfile', {
      argsObj: {
        boxMbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        title: string
        logo: string
        description: string
        url: string
        loyaltyEnabled: boolean
        loyaltyPercentage: bigint | number
      }
      argsTuple: [boxMbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, title: string, logo: string, description: string, url: string, loyaltyEnabled: boolean, loyaltyPercentage: bigint | number]
      returns: [string, string, string, string, boolean, bigint]
    }>
    & Record<'ChangeContractFee(uint64)void' | 'ChangeContractFee', {
      argsObj: {
        newFee: bigint | number
      }
      argsTuple: [newFee: bigint | number]
      returns: void
    }>
    & Record<'WithdrawContractFee()uint64' | 'WithdrawContractFee', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractFee?: IntegerState
      royaltyPointToken?: IntegerState
      contractTokenBalance?: IntegerState
      contractFeeBalance?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MothSig = keyof Moth['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MothSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Moth smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MothSig> = Moth['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Moth smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MothSig> = Moth['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MothCreateCalls = (typeof MothCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MothCreateCallParams =
  | (TypedCallParams<'createApplication(uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type MothDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MothCreateCalls) => MothCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MothCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Moth smart contract using the createApplication(uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.siteFee],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the CreateAsa()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAsa(args: MethodArgs<'CreateAsa()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'CreateAsa()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the OptIn(axfer)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIn(args: MethodArgs<'OptIn(axfer)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'OptIn(axfer)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.optInTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the CheckOptedIn()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkOptedIn(args: MethodArgs<'CheckOptedIn()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'CheckOptedIn()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the GatewayFull(pay,address,uint64)(uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gatewayFull(args: MethodArgs<'GatewayFull(pay,address,uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'GatewayFull(pay,address,uint64)(uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.toAddress, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gatewaySpendToken(args: MethodArgs<'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.toAddress, args.totalAmount, args.tokenToSpend],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the GetMBR(string,string,string,string,bool,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMbr(args: MethodArgs<'GetMBR(string,string,string,string,bool,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'GetMBR(string,string,string,string,bool,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.title, args.logo, args.description, args.url, args.loyaltyEnabled, args.loyaltyPercentage],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static editProfile(args: MethodArgs<'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMbrPayment, args.title, args.logo, args.description, args.url, args.loyaltyEnabled, args.loyaltyPercentage],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ChangeContractFee(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeContractFee(args: MethodArgs<'ChangeContractFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ChangeContractFee(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newFee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the WithdrawContractFee()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawContractFee(args: MethodArgs<'WithdrawContractFee()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'WithdrawContractFee()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Moth smart contract
 */
export class MothClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MothClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Moth['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Moth smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MothDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MothCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Moth smart contract using the createApplication(uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(MothCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Moth smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the CreateAsa()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAsa(args: MethodArgs<'CreateAsa()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.createAsa(args, params))
  }

  /**
   * Calls the OptIn(axfer)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIn(args: MethodArgs<'OptIn(axfer)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.optIn(args, params))
  }

  /**
   * Calls the CheckOptedIn()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkOptedIn(args: MethodArgs<'CheckOptedIn()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.checkOptedIn(args, params))
  }

  /**
   * Calls the GatewayFull(pay,address,uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gatewayFull(args: MethodArgs<'GatewayFull(pay,address,uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.gatewayFull(args, params))
  }

  /**
   * Calls the GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gatewaySpendToken(args: MethodArgs<'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.gatewaySpendToken(args, params))
  }

  /**
   * Calls the GetMBR(string,string,string,string,bool,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMbr(args: MethodArgs<'GetMBR(string,string,string,string,bool,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.getMbr(args, params))
  }

  /**
   * Calls the EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public editProfile(args: MethodArgs<'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.editProfile(args, params))
  }

  /**
   * Calls the ChangeContractFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeContractFee(args: MethodArgs<'ChangeContractFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.changeContractFee(args, params))
  }

  /**
   * Calls the WithdrawContractFee()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawContractFee(args: MethodArgs<'WithdrawContractFee()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MothCallFactory.withdrawContractFee(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Moth['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractFee() {
        return MothClient.getIntegerState(state, 'contractFee')
      },
      get royaltyPointToken() {
        return MothClient.getIntegerState(state, 'royaltyPointToken')
      },
      get contractTokenBalance() {
        return MothClient.getIntegerState(state, 'contractTokenBalance')
      },
      get contractFeeBalance() {
        return MothClient.getIntegerState(state, 'contractFeeBalance')
      },
    }
  }

  public compose(): MothComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createAsa(args: MethodArgs<'CreateAsa()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAsa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optIn(args: MethodArgs<'OptIn(axfer)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkOptedIn(args: MethodArgs<'CheckOptedIn()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkOptedIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      gatewayFull(args: MethodArgs<'GatewayFull(pay,address,uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gatewayFull(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      gatewaySpendToken(args: MethodArgs<'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gatewaySpendToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMbr(args: MethodArgs<'GetMBR(string,string,string,string,bool,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMbr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      editProfile(args: MethodArgs<'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.editProfile(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeContractFee(args: MethodArgs<'ChangeContractFee(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeContractFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawContractFee(args: MethodArgs<'WithdrawContractFee()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawContractFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MothComposer
  }
}
export type MothComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the CreateAsa()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAsa(args: MethodArgs<'CreateAsa()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'CreateAsa()uint64'>]>

  /**
   * Calls the OptIn(axfer)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIn(args: MethodArgs<'OptIn(axfer)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'OptIn(axfer)bool'>]>

  /**
   * Calls the CheckOptedIn()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkOptedIn(args: MethodArgs<'CheckOptedIn()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'CheckOptedIn()bool'>]>

  /**
   * Calls the GatewayFull(pay,address,uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gatewayFull(args: MethodArgs<'GatewayFull(pay,address,uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'GatewayFull(pay,address,uint64)(uint64,uint64)'>]>

  /**
   * Calls the GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gatewaySpendToken(args: MethodArgs<'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'GatewaySpendToken(pay,address,uint64,uint64)(uint64,uint64)'>]>

  /**
   * Calls the GetMBR(string,string,string,string,bool,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbr(args: MethodArgs<'GetMBR(string,string,string,string,bool,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'GetMBR(string,string,string,string,bool,uint64)uint64'>]>

  /**
   * Calls the EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  editProfile(args: MethodArgs<'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'EditProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)'>]>

  /**
   * Calls the ChangeContractFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeContractFee(args: MethodArgs<'ChangeContractFee(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'ChangeContractFee(uint64)void'>]>

  /**
   * Calls the WithdrawContractFee()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawContractFee(args: MethodArgs<'WithdrawContractFee()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, MethodReturn<'WithdrawContractFee()uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the Moth smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): MothComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MothComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<MothComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<MothComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type MothComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type MothComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
