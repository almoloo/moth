{
  "hints": {
    "createApplication(uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "CreateAsa()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "OptIn(axfer)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "Gateway(pay,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "GetMBR(pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "CreateProfile(pay,string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "EditProfile(string,string,string,string,bool,uint64)(string,string,string,string,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "GetContractFee()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProfile(address)(string,string,string,string,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "defultPercentage": {
          "type": "uint64",
          "key": "defultPercentage"
        },
        "contractFee": {
          "type": "uint64",
          "key": "contractFee"
        },
        "royaltyPointToken": {
          "type": "uint64",
          "key": "royaltyPointToken"
        },
        "contractBalance": {
          "type": "uint64",
          "key": "contractBalance"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjkyLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gc2l0ZUZlZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gZGVmdWx0UGVyY2VudGFnZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKGRlZnVsdFBlcmNlbnRhZ2U6IHVpbnQ2NCwgc2l0ZUZlZTogdWludDY0KTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6MjYKCS8vIHRoaXMuZGVmdWx0UGVyY2VudGFnZS52YWx1ZSA9IGRlZnVsdFBlcmNlbnRhZ2UKCWJ5dGUgMHg2NDY1NjY3NTZjNzQ1MDY1NzI2MzY1NmU3NDYxNjc2NSAvLyAiZGVmdWx0UGVyY2VudGFnZSIKCWZyYW1lX2RpZyAtMSAvLyBkZWZ1bHRQZXJjZW50YWdlOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czoyNwoJLy8gdGhpcy5jb250cmFjdEZlZS52YWx1ZSA9IHNpdGVGZWUKCWJ5dGUgMHg2MzZmNmU3NDcyNjE2Mzc0NDY2NTY1IC8vICJjb250cmFjdEZlZSIKCWZyYW1lX2RpZyAtMiAvLyBzaXRlRmVlOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIE9ubHlDcmVhdG9yKCk6IHZvaWQKLy8KLy8gRW5zdXJlIHRoZSBjYWxsZXIgaXMgYXBwIGNyZWF0b3IKT25seUNyZWF0b3I6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjMyCgkvLyBhc3NlcnQodGhpcy5hcHAuY3JlYXRvciA9PT0gdGhpcy50eG4uc2VuZGVyKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIENyZWF0ZUFzYSgpdWludDY0CiphYmlfcm91dGVfQ3JlYXRlQXNhOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIENyZWF0ZUFzYSgpdWludDY0CgljYWxsc3ViIENyZWF0ZUFzYQoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIENyZWF0ZUFzYSgpOiBBc3NldElECkNyZWF0ZUFzYToKCXByb3RvIDAgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czozNgoJLy8gdGhpcy5Pbmx5Q3JlYXRvcigpCgljYWxsc3ViIE9ubHlDcmVhdG9yCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czozOAoJLy8gY3JlYXRlQXNzZXQgPSBzZW5kQXNzZXRDcmVhdGlvbih7CgkvLyAgICAgICBjb25maWdBc3NldE5hbWU6ICdNYXRoYWsnLAoJLy8gICAgICAgY29uZmlnQXNzZXRVbml0TmFtZTogJ01BSycsCgkvLyAgICAgICBjb25maWdBc3NldFRvdGFsOiAxMDAwMDAsCgkvLyAgICAgICBjb25maWdBc3NldERlY2ltYWxzOiAwLAoJLy8gICAgICAgY29uZmlnQXNzZXRDbGF3YmFjazogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TWFuYWdlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjM5CgkvLyBjb25maWdBc3NldE5hbWU6ICdNYXRoYWsnCglieXRlIDB4NGQ2MTc0Njg2MTZiIC8vICJNYXRoYWsiCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6NDAKCS8vIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICdNQUsnCglieXRlIDB4NGQ0MTRiIC8vICJNQUsiCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjQxCgkvLyBjb25maWdBc3NldFRvdGFsOiAxMDAwMDAKCWludCAxMDAwMDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6NDIKCS8vIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDAKCWludCAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjQzCgkvLyBjb25maWdBc3NldENsYXdiYWNrOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldENsYXdiYWNrCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo0NAoJLy8gY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglmcmFtZV9idXJ5IDAgLy8gY3JlYXRlQXNzZXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6NDcKCS8vIHRoaXMucm95YWx0eVBvaW50VG9rZW4udmFsdWUgPSBjcmVhdGVBc3NldAoJYnl0ZSAweDcyNmY3OTYxNmM3NDc5NTA2ZjY5NmU3NDU0NmY2YjY1NmUgLy8gInJveWFsdHlQb2ludFRva2VuIgoJZnJhbWVfZGlnIDAgLy8gY3JlYXRlQXNzZXQ6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjQ5CgkvLyByZXR1cm4gY3JlYXRlQXNzZXQ7CglmcmFtZV9kaWcgMCAvLyBjcmVhdGVBc3NldDogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIE9wdEluKGF4ZmVyKWJvb2wKKmFiaV9yb3V0ZV9PcHRJbjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gb3B0SW5UeG46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwIChvcHRJblR4bikgZm9yIE9wdEluIG11c3QgYmUgYSBheGZlciB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBPcHRJbihheGZlcilib29sCgljYWxsc3ViIE9wdEluCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIE9wdEluKG9wdEluVHhuOiBBc3NldFRyYW5zZmVyVHhuKTogYm9vbGVhbgpPcHRJbjoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6NTMKCS8vIGFzc2VydCh0aGlzLnJveWFsdHlQb2ludFRva2VuLmV4aXN0cykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTUwNmY2OTZlNzQ1NDZmNmI2NTZlIC8vICJyb3lhbHR5UG9pbnRUb2tlbiIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6NTUKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4ob3B0SW5UeG4sIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnJveWFsdHlQb2ludFRva2VuLnZhbHVlLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBvcHRJblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoib3B0SW5UeG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy50eG4uc2VuZGVyIn0KCWFzc2VydAoKCS8vIHZlcmlmeSB4ZmVyQXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBvcHRJblR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1MDZmNjk2ZTc0NTQ2ZjZiNjU2ZSAvLyAicm95YWx0eVBvaW50VG9rZW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im9wdEluVHhuIiwiZmllbGQiOiJ4ZmVyQXNzZXQiLCJleHBlY3RlZCI6InRoaXMucm95YWx0eVBvaW50VG9rZW4udmFsdWUifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTEgLy8gb3B0SW5UeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpbnQgMAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im9wdEluVHhuIiwiZmllbGQiOiJhc3NldEFtb3VudCIsImV4cGVjdGVkIjoiMCJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG9wdEluVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldFJlY2VpdmVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoib3B0SW5UeG4iLCJmaWVsZCI6ImFzc2V0UmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjYyCgkvLyByZXR1cm4gdGhpcy50eG4uc2VuZGVyLmlzT3B0ZWRJblRvQXNzZXQodGhpcy5yb3lhbHR5UG9pbnRUb2tlbi52YWx1ZSk7Cgl0eG4gU2VuZGVyCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1MDZmNjk2ZTc0NTQ2ZjZiNjU2ZSAvLyAicm95YWx0eVBvaW50VG9rZW4iCglhcHBfZ2xvYmFsX2dldAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglzd2FwCglwb3AKCXJldHN1YgoKLy8gR2F0ZXdheShwYXksYWRkcmVzcyx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX0dhdGV3YXk6CgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHRvQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAxICh0b0FkZHJlc3MpIGZvciBHYXRld2F5IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBwYXltZW50OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCgkvLyBhcmd1bWVudCAyIChwYXltZW50KSBmb3IgR2F0ZXdheSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIEdhdGV3YXkocGF5LGFkZHJlc3MsdWludDY0KXZvaWQKCWNhbGxzdWIgR2F0ZXdheQoJaW50IDEKCXJldHVybgoKLy8gR2F0ZXdheShwYXltZW50OiBQYXlUeG4sIHRvQWRkcmVzczogQWRkcmVzcywgYW1vdW50OiB1aW50NjQpOiB2b2lkCkdhdGV3YXk6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjY2CgkvLyBhc3NlcnQodGhpcy5yb3lhbHR5UG9pbnRUb2tlbi5leGlzdHMpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1MDZmNjk2ZTc0NTQ2ZjZiNjU2ZSAvLyAicm95YWx0eVBvaW50VG9rZW4iCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjY3CgkvLyBhc3NlcnQodGhpcy5wcm9maWxlcyh0b0FkZHJlc3MpLmV4aXN0cykKCWZyYW1lX2RpZyAtMiAvLyB0b0FkZHJlc3M6IEFkZHJlc3MKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo2OAoJLy8gdGhpcy50eG4uc2VuZGVyLmlzT3B0ZWRJblRvQXNzZXQodGhpcy5yb3lhbHR5UG9pbnRUb2tlbi52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg3MjZmNzk2MTZjNzQ3OTUwNmY2OTZlNzQ1NDZmNmI2NTZlIC8vICJyb3lhbHR5UG9pbnRUb2tlbiIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6NzAKCS8vIHZlcmlmeVR4bihwYXltZW50LCB7CgkvLyAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBBbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InBheW1lbnQiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiYW1vdW50In0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHBheW1lbnQ6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5bWVudCIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo3NQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdG9BZGRyZXNzLAoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo3NgoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjc3CgkvLyByZWNlaXZlcjogdG9BZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gdG9BZGRyZXNzOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo3OAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo4MQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLnJveWFsdHlQb2ludFRva2VuLnZhbHVlLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCAvIDEwMCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czo4MgoJLy8geGZlckFzc2V0OiB0aGlzLnJveWFsdHlQb2ludFRva2VuLnZhbHVlCglieXRlIDB4NzI2Zjc5NjE2Yzc0Nzk1MDZmNjk2ZTc0NTQ2ZjZiNjU2ZSAvLyAicm95YWx0eVBvaW50VG9rZW4iCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjgzCgkvLyBhc3NldEFtb3VudDogYW1vdW50IC8gMTAwCglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWludCAxMDAKCS8KCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjg0CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6ODUKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBHZXRNQlIocGF5KXVpbnQ2NAoqYWJpX3JvdXRlX0dldE1CUjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYm94TUJSUGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAoYm94TUJSUGF5bWVudCkgZm9yIEdldE1CUiBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIEdldE1CUihwYXkpdWludDY0CgljYWxsc3ViIEdldE1CUgoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIEdldE1CUihib3hNQlJQYXltZW50OiBQYXlUeG4pOiB1aW50NjQKR2V0TUJSOgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6OTEKCS8vIHByZUFwcE1CUiA9IHRoaXMuYXBwLmFkZHJlc3MubWluQmFsYW5jZQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJcG9wCglmcmFtZV9idXJ5IDAgLy8gcHJlQXBwTUJSOiB1aW50NjQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjkyCgkvLyB0aGlzLnByb2ZpbGVzKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSB7CgkvLyAgICAgICB0aXRsZTogJ3N0cmluZycsCgkvLyAgICAgICBsb2dvOiAnc3RyaW5nJywKCS8vICAgICAgIGRlc2NyaXB0aW9uOiAnc3RyaW5nJywKCS8vICAgICAgIHVybDogJ3N0cmluZycsCgkvLyAgICAgICBsb3lhbHR5RW5hYmxlZDogdHJ1ZSwKCS8vICAgICAgIGxveWFsdHlQZXJjZW50YWdlOiAxMDAwLAoJLy8gICAgIH0KCXR4biBTZW5kZXIKCWR1cAoJYm94X2RlbAoJcG9wCglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDExIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWJ5dGUgMHgwMDA2NzM3NDcyNjk2ZTY3CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJYnl0ZSAweDAwMDY3Mzc0NzI2OTZlNjcKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglieXRlIDB4MDAwNjczNzQ3MjY5NmU2NwoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWJ5dGUgMHgwMDA2NzM3NDcyNjk2ZTY3CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJYnl0ZSAweDAwCglpbnQgMAoJaW50IDEKCXNldGJpdAoJY2FsbHN1YiAqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAzZTgKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJYm94X3B1dAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6MTAwCgkvLyBNYnIgPSB0aGlzLmFwcC5hZGRyZXNzLm1pbkJhbGFuY2UgLSBwcmVBcHBNQlIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKCXBvcAoJZnJhbWVfZGlnIDAgLy8gcHJlQXBwTUJSOiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgMSAvLyBNYnI6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6MTAxCgkvLyB0aGlzLnByb2ZpbGVzKHRoaXMudHhuLnNlbmRlcikuZGVsZXRlKCkKCXR4biBTZW5kZXIKCWJveF9kZWwKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjEwMgoJLy8gcmV0dXJuIE1icjsKCWZyYW1lX2RpZyAxIC8vIE1icjogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgovLyBDcmVhdGVQcm9maWxlKHBheSxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsYm9vbCx1aW50NjQpKHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxib29sLHVpbnQ2NCkKKmFiaV9yb3V0ZV9DcmVhdGVQcm9maWxlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBsb3lhbHR5UGVyY2VudGFnZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglidG9pCgoJLy8gbG95YWx0eUVuYWJsZWQ6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWR1cAoJbGVuCglpbnQgMQoJPT0KCgkvLyBhcmd1bWVudCAxIChsb3lhbHR5RW5hYmxlZCkgZm9yIENyZWF0ZVByb2ZpbGUgbXVzdCBiZSBhIGJvb2wKCWFzc2VydAoJaW50IDAKCWdldGJpdAoKCS8vIHVybDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglleHRyYWN0IDIgMAoKCS8vIGRlc2NyaXB0aW9uOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gbG9nbzogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHRpdGxlOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gYm94TUJSUGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09CgoJLy8gYXJndW1lbnQgNiAoYm94TUJSUGF5bWVudCkgZm9yIENyZWF0ZVByb2ZpbGUgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBDcmVhdGVQcm9maWxlKHBheSxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsYm9vbCx1aW50NjQpKHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxib29sLHVpbnQ2NCkKCWNhbGxzdWIgQ3JlYXRlUHJvZmlsZQoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIENyZWF0ZVByb2ZpbGUoYm94TUJSUGF5bWVudDogUGF5VHhuLCB0aXRsZTogc3RyaW5nLCBsb2dvOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIHVybDogc3RyaW5nLCBsb3lhbHR5RW5hYmxlZDogYm9vbGVhbiwgbG95YWx0eVBlcmNlbnRhZ2U6IHVpbnQ2NCk6IHByb2ZpbGUKQ3JlYXRlUHJvZmlsZToKCXByb3RvIDcgMQoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6MTE1CgkvLyB0aGlzLnByb2ZpbGVzKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSB7CgkvLyAgICAgICB0aXRsZTogdGl0bGUsCgkvLyAgICAgICBsb2dvOiBsb2dvLAoJLy8gICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLAoJLy8gICAgICAgdXJsOiB1cmwsCgkvLyAgICAgICBsb3lhbHR5RW5hYmxlZDogbG95YWx0eUVuYWJsZWQsCgkvLyAgICAgICBsb3lhbHR5UGVyY2VudGFnZTogbG95YWx0eVBlcmNlbnRhZ2UsCgkvLyAgICAgfQoJdHhuIFNlbmRlcgoJZHVwCglib3hfZGVsCglwb3AKCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwMTEgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0yIC8vIHRpdGxlOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0zIC8vIGxvZ286IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTQgLy8gZGVzY3JpcHRpb246IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTUgLy8gdXJsOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJYnl0ZSAweDAwCglpbnQgMAoJZnJhbWVfZGlnIC02IC8vIGxveWFsdHlFbmFibGVkOiBib29sZWFuCglzZXRiaXQKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtNyAvLyBsb3lhbHR5UGVyY2VudGFnZTogdWludDY0CglpdG9iCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWJveF9wdXQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjEyOQoJLy8gcmV0dXJuIHRoaXMucHJvZmlsZXModGhpcy50eG4uc2VuZGVyKS52YWx1ZTsKCXR4biBTZW5kZXIKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucHJvZmlsZXModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYXNzZXJ0CglyZXRzdWIKCi8vIEVkaXRQcm9maWxlKHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxib29sLHVpbnQ2NCkoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLGJvb2wsdWludDY0KQoqYWJpX3JvdXRlX0VkaXRQcm9maWxlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBsb3lhbHR5UGVyY2VudGFnZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglidG9pCgoJLy8gbG95YWx0eUVuYWJsZWQ6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWR1cAoJbGVuCglpbnQgMQoJPT0KCgkvLyBhcmd1bWVudCAxIChsb3lhbHR5RW5hYmxlZCkgZm9yIEVkaXRQcm9maWxlIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludCAwCglnZXRiaXQKCgkvLyB1cmw6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJZXh0cmFjdCAyIDAKCgkvLyBkZXNjcmlwdGlvbjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIGxvZ286IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyB0aXRsZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgRWRpdFByb2ZpbGUoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLGJvb2wsdWludDY0KShzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsYm9vbCx1aW50NjQpCgljYWxsc3ViIEVkaXRQcm9maWxlCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gRWRpdFByb2ZpbGUodGl0bGU6IHN0cmluZywgbG9nbzogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCB1cmw6IHN0cmluZywgbG95YWx0eUVuYWJsZWQ6IGJvb2xlYW4sIGxveWFsdHlQZXJjZW50YWdlOiB1aW50NjQpOiBwcm9maWxlCkVkaXRQcm9maWxlOgoJcHJvdG8gNiAxCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czoxNDAKCS8vIGFzc2VydCh0aGlzLnByb2ZpbGVzKHRoaXMudHhuLnNlbmRlcikuZXhpc3RzKQoJdHhuIFNlbmRlcgoJYm94X2xlbgoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjE0MQoJLy8gdGhpcy5wcm9maWxlcyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gewoJLy8gICAgICAgdGl0bGU6IHRpdGxlLAoJLy8gICAgICAgbG9nbzogbG9nbywKCS8vICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiwKCS8vICAgICAgIHVybDogdXJsLAoJLy8gICAgICAgbG95YWx0eUVuYWJsZWQ6IGxveWFsdHlFbmFibGVkLAoJLy8gICAgICAgbG95YWx0eVBlcmNlbnRhZ2U6IGxveWFsdHlQZXJjZW50YWdlLAoJLy8gICAgIH0KCXR4biBTZW5kZXIKCWR1cAoJYm94X2RlbAoJcG9wCglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDExIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyB0aXRsZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBsb2dvOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0zIC8vIGRlc2NyaXB0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC00IC8vIHVybDogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWJ5dGUgMHgwMAoJaW50IDAKCWZyYW1lX2RpZyAtNSAvLyBsb3lhbHR5RW5hYmxlZDogYm9vbGVhbgoJc2V0Yml0CgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTYgLy8gbG95YWx0eVBlcmNlbnRhZ2U6IHVpbnQ2NAoJaXRvYgoJY2FsbHN1YiAqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJcG9wIC8vIHBvcCBoZWFkIG9mZnNldAoJY29uY2F0IC8vIGNvbmNhdCBoZWFkIGFuZCB0YWlsCglib3hfcHV0CgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czoxNTAKCS8vIHJldHVybiB0aGlzLnByb2ZpbGVzKHRoaXMudHhuLnNlbmRlcikudmFsdWU7Cgl0eG4gU2VuZGVyCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2ZpbGVzKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWFzc2VydAoJcmV0c3ViCgovLyBHZXRDb250cmFjdEZlZSgpdWludDY0CiphYmlfcm91dGVfR2V0Q29udHJhY3RGZWU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgR2V0Q29udHJhY3RGZWUoKXVpbnQ2NAoJY2FsbHN1YiBHZXRDb250cmFjdEZlZQoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIEdldENvbnRyYWN0RmVlKCk6IHVpbnQ2NApHZXRDb250cmFjdEZlZToKCXByb3RvIDAgMQoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6MTU0CgkvLyByZXR1cm4gdGhpcy5jb250cmFjdEZlZS52YWx1ZTsKCWJ5dGUgMHg2MzZmNmU3NDcyNjE2Mzc0NDY2NTY1IC8vICJjb250cmFjdEZlZSIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGdldFByb2ZpbGUoYWRkcmVzcykoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLGJvb2wsdWludDY0KQoqYWJpX3JvdXRlX2dldFByb2ZpbGU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoYWRkcmVzcykgZm9yIGdldFByb2ZpbGUgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ2V0UHJvZmlsZShhZGRyZXNzKShzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsYm9vbCx1aW50NjQpCgljYWxsc3ViIGdldFByb2ZpbGUKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRQcm9maWxlKGFkZHJlc3M6IEFkZHJlc3MpOiBwcm9maWxlCmdldFByb2ZpbGU6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9Nb3RoLmFsZ28udHM6MTU4CgkvLyBhc3NlcnQodGhpcy5wcm9maWxlcyhhZGRyZXNzKS5leGlzdHMpCglmcmFtZV9kaWcgLTEgLy8gYWRkcmVzczogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvTW90aC5hbGdvLnRzOjE1OQoJLy8gdmFsdWVzID0gdGhpcy5wcm9maWxlcyhhZGRyZXNzKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vdmFsdWVzCgoJLy8gY29udHJhY3RzL01vdGguYWxnby50czoxNjEKCS8vIHJldHVybiB2YWx1ZXM7CglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vdmFsdWVzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnByb2ZpbGVzKGFkZHJlc3MpLnZhbHVlCglhc3NlcnQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CgltZXRob2QgIkNyZWF0ZUFzYSgpdWludDY0IgoJbWV0aG9kICJPcHRJbihheGZlcilib29sIgoJbWV0aG9kICJHYXRld2F5KHBheSxhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJHZXRNQlIocGF5KXVpbnQ2NCIKCW1ldGhvZCAiQ3JlYXRlUHJvZmlsZShwYXksc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLGJvb2wsdWludDY0KShzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsYm9vbCx1aW50NjQpIgoJbWV0aG9kICJFZGl0UHJvZmlsZShzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsYm9vbCx1aW50NjQpKHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxib29sLHVpbnQ2NCkiCgltZXRob2QgIkdldENvbnRyYWN0RmVlKCl1aW50NjQiCgltZXRob2QgImdldFByb2ZpbGUoYWRkcmVzcykoc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLGJvb2wsdWludDY0KSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfQ3JlYXRlQXNhICphYmlfcm91dGVfT3B0SW4gKmFiaV9yb3V0ZV9HYXRld2F5ICphYmlfcm91dGVfR2V0TUJSICphYmlfcm91dGVfQ3JlYXRlUHJvZmlsZSAqYWJpX3JvdXRlX0VkaXRQcm9maWxlICphYmlfcm91dGVfR2V0Q29udHJhY3RGZWUgKmFiaV9yb3V0ZV9nZXRQcm9maWxlCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1YgoKKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWR1cAoJbGVuCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWJ0b2kKCSsKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9idXJ5IC0yIC8vIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Moth",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "defultPercentage",
            "type": "uint64"
          },
          {
            "name": "siteFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "CreateAsa",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "OptIn",
        "args": [
          {
            "name": "optInTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "Gateway",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "toAddress",
            "type": "address"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "GetMBR",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "CreateProfile",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay"
          },
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "logo",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "loyaltyEnabled",
            "type": "bool"
          },
          {
            "name": "loyaltyPercentage",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(string,string,string,string,bool,uint64)"
        }
      },
      {
        "name": "EditProfile",
        "args": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "logo",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "loyaltyEnabled",
            "type": "bool"
          },
          {
            "name": "loyaltyPercentage",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(string,string,string,string,bool,uint64)"
        }
      },
      {
        "name": "GetContractFee",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getProfile",
        "args": [
          {
            "name": "address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(string,string,string,string,bool,uint64)"
        }
      }
    ]
  }
}